<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA配置GIT及日常使用</title>
      <link href="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p>下载安装完Git后，在<strong>*File–&gt;settings–&gt;Version Control</strong>下选择Git选项，在<strong><em>Path to Git executable</em></strong>中选择本地安装的git.exe文件，点击Test，成功会弹出Git版本信息，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_c26308fab52f920cbdb18ae96abc9464_r.png" alt="img"><br>注意，下列<strong><em>SSH executable</em></strong>选项中，代表连接选项，通常我们使用简便一些Http的方式</p><p><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_8ab80fbb32261334d0229da0c1d87ef5_r-1588818627618.png" alt="img"></p><h2 id="日常开发操作"><a href="#日常开发操作" class="headerlink" title="日常开发操作"></a>日常开发操作</h2><h3 id="拉取远程仓库代码"><a href="#拉取远程仓库代码" class="headerlink" title="拉取远程仓库代码"></a>拉取远程仓库代码</h3><p>选择<strong><em>File–&gt;New–&gt;Project from Version Control–&gt;Git</em></strong>，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_cd26d5f86124e471c9b9dd4becf83c39_r.png" alt="img"><br>找到远程仓库地址，这里以我的Github为例，其他远程仓库类似，选择项目<strong><em>clone or download</em></strong>,选择http或ssh方式，复制地址，这里和idea中保持一致，选择http<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_1877990939a86213515cd4cf06531b19_r.png" alt="img"><br>然后切换至idea中，点击Test，这里我已经登录保存过，第一次需要填远程仓库的用户名密码，然后选择本地硬盘，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_9185d1fc5abce9c3aad7f7b73ffb33d1_r.png" alt="img"><br>clone，等待片刻，弹出窗口，随便选择一个窗口打开即可，项目拉下来如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_ee483ee71c6f11fb6c8bcb615803e7ad_r.png" alt="img"><br>Idea右下角，代表分支，默认master分支，如下，<strong><em>Local Branches</em></strong>代表本地分支，<strong><em>Remote Branches</em></strong>代表远程分支，<strong><em>New Branch</em></strong>添加新的本地分支<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_1e3740bbb65af2e826fe82486e14237f_r.png" alt="img"></p><h3 id="更新和提交"><a href="#更新和提交" class="headerlink" title="更新和提交"></a>更新和提交</h3><p>新增文件，test01.txt,弹出窗口提示，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_e263c754cc59cedc06f49314a758aef9_r.png" alt="img"><br>该提示代表是否添加至暂存区，等同于git add命令，若选择add后，文件呈绿色，选择cancel则为红色，若此时为添加也可右键点击文件，选择<strong><em>git–&gt;add</em></strong><br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_019bb5c6eef4d6cd58e32ff0f248c43a_r.png" alt="img"><br>工作完成后，选择idea工具栏中Git操作，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_1d813e51f902c4f19e0b839f611a7849_r.png" alt="img"><br>项目目录中绿色新增的部分，为新增文件，下方红色为未添加到暂存区的，选择我们需要提交的文件，双击可查看新增或修改的内容，下方<strong><em>Conmit Message</em></strong>为提交的说明<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_086a104e15bd701b6bbc55598a4689ea_r.png" alt="img"><br>提交本地则选择Commit,提交远程选择<strong><em>Commit And Push</em></strong>，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_919e7cac07a79a948b539e61a7bb0f80_r.png" alt="img"><br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_ff7f65ac8a549c9dd53d9028cc2b3ea9_r.png" alt="img"><br>点击Push后弹出下列提示则成功<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_2cf20ba910ffca25a5bba6730ccfb1f0_r.png" alt="img"></p><h3 id="切换分支及分支合并"><a href="#切换分支及分支合并" class="headerlink" title="切换分支及分支合并"></a>切换分支及分支合并</h3><p>选择右下角分支，切换至dev分支，自动会创建本地分支，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_87593e3c3fd12850eed0d57e14c44764_r.png" alt="img"><br>切换完成后，此时添加test02文件，提交至本地即可，提交完成后，切换至本地master分支，此时项目中没有test02<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_cc74e07e6d1f05bd345e4dd6d285e7d5_r.png" alt="img"><br>左键点击dev分支，选择<strong><em>Merge into Current</em></strong>,如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_a619eb29d83ce18e6b4b2103aac4b7e0_r.png" alt="img"><br>现在看项目中,test02已经出来了，此时test02为白色，若想推送至远程，则需要继续push，右键项目，选择<strong><em>GIT–&gt;Repository–&gt;Push</em></strong><br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_c605a03e807c166f2e2ee8c963913cbf_r.png" alt="img"><br>然后检查需要提交的文件即可。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>在远程仓库中修改readme.txt模拟他人提交<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_d4c0c0dda00e55e49ca4eace8ad4437b_r.png" alt="img"><br>本地也对readme.txt内容进行修改，添加内容“6666666666”，修改后文件呈蓝色，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_94ae29f97acce789b12c1db5a1494542_r.png" alt="img"><br>若不进行更新直接提交，push时出现以下提示<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_3f33d7523158ba424e39145625b901d1_r.png" alt="img"><br>此时可以选择Cancel，执行Pull操作后再提交远程，也可以选择Merge，弹出Merge操作窗口，如下<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_7c89e38a4b9360fc9b55cc1a08951ee2_r.png" alt="img"><br>右方可以选择，接受你自己的，接受他人的，第三项则手动merge，选择手动Merge后，冲突的内容呈红色，左侧为本地，右侧远程仓库，中间则修改版本根据需要解决冲突即可<br><img src="/2020/05/07/IDEA%E9%85%8D%E7%BD%AEGIT%E5%8F%8A%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/m_486ecc885c4d93dd68fe33ce4c43b2ab_r.png" alt="img"><br><strong>注：每次提交前都进行Pull操作可避免不必要的麻烦</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT入门及团队协作</title>
      <link href="/2020/05/07/GIT%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/"/>
      <url>/2020/05/07/GIT%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="SVN与GIT的主要区别"><a href="#SVN与GIT的主要区别" class="headerlink" title="SVN与GIT的主要区别"></a>SVN与GIT的主要区别</h2><p><strong>SVN</strong>：是一个集中式版本控制系统；版本库是集中放在中央服务器的，干活时首先要从中央服务器获取最新版本，然后开始干活，完成后需要把自己干完的活推送到中央服务器。<br><strong>GIT</strong>是分布式版本控制系统；每个人的电脑就是一个完整的版本库，多人协作时只需要互相把干完的活推送至对方就可以了。</p><h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><ul><li>从Git官网直接下载，安装完成后有” Git Bash “即安装成功</li><li>安装完成后，还需要最后一步设置，在Git Bash命令行输入：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></li><li><em>注意*</em> <strong><em>git config</em></strong>命令的<strong><em>–global</em></strong>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</li></ul><h2 id="基础命令操作"><a href="#基础命令操作" class="headerlink" title="基础命令操作"></a>基础命令操作</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>首先在自己的文件夹中右键选择 Git Bash</p><ul><li>通过命令 <strong><em>git init</em></strong> 把这个目录变成git可以管理的仓库，<br>文件夹中会生成一个.git目录</li><li>添加文件至版本库demo<br>新增文件readme.txt,内容为“11111111111”；<br>第一步：使用命令 <strong><em>git add readme.txt</em></strong>添加到暂存区里面去，没有任何提示，说明已经添加成功了。<br>第二步：用命令 <strong><em>git commit</em></strong>把文件提交到仓库，使用<strong><em>-m</em></strong>来描述本次提交的描述<br>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令<strong><em>git status</em></strong>来查看是否还有文件未提交，<br>当我们修改文件后，例，替换readme.txt，内容修改为222222222<br>再执行<strong><em>git status</em></strong>,会提示有文件更改<br>当我们想查看该文件发生了哪些更改，执行<strong><em>git diff 文件名</em></strong>来查看</li></ul><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>我们继续修改readme.txt，添加内容”3333333333”，执行<strong><em>git commit</em></strong>命令提交至仓库，目前一共提交至仓库2次了；<br>执行<strong><em>git log</em></strong> 命令查看提交历史<br>使用 –pretty=oneline 参数会使历史提交记录更加简洁,<br>现在我们把文件回退到第一次提交的内容<br>执行<strong><em>git reset –hard</em></strong>命令来回退，回退有两种方式</p><ul><li>第一种按照“上一个版本”的方式:<br>回退至上上个版本使用<strong><em>git reset –hard HEAD^^</em></strong>以此类推，若太多，例，回退至前100版本，可使用<strong><em>git reset –hard HEAD~100</em></strong></li><li>第二种通过版本号回退，如下<br>修改readme.txt内容为“4444444444”，然后提交至仓库；查看历史<br>现回退至第一个版本，使用<strong><em>git reset –hard 版本号</em></strong><br>若我们不知道需要回退版本的版本号，我们可以通过<strong><em>git reflog</em></strong>来查看，再通过<strong><em>git reset –hard 版本号</em></strong>来恢复</li></ul><h2 id="工作区及暂存区"><a href="#工作区及暂存区" class="headerlink" title="工作区及暂存区"></a>工作区及暂存区</h2><p><strong>工作区：</strong>文件夹中除.git目录外所看到的目录文件，即开发项目时都属于再工作区的范畴。<br><strong>版本库：</strong>即文件夹中.git文件夹，该目录下最重要的是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。<br>我们前面说过使用Git提交文件到版本库有两步：<br>第一步：是使用 <strong><em>git add</em></strong> 把文件添加进去，实际上就是把文件添加到暂存区。<br>第二步：使用<strong><em>git commit</em></strong>提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>这里以我自己的github为例子，其他远程仓库原理操作一致。<br>在github中新建一个新的repository<br>先把一个我们已有的本地仓库与远程github仓库关联，执行<strong><em>git remote add origin 仓库地址</em></strong>进行关联，删除已有关联执行 <strong><em>git remote rm origin</em></strong><br>由于远程库是空的，推送使用push命令，我们第一次推送master分支时，加上了 <strong><em>–u</em></strong>参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令.<br>上面是本地库的内容推至远程空的仓库，若把远程库内容克隆到本地库则执行 <strong><em>git clone 地址</em></strong>即可。<br>更新分支的内容使用<strong><em>git pull</em></strong>即可。</p><p><strong>Git命令之强制远程代码</strong> : git push origin 分支名 –force</p><p><strong>Git远程服务器覆盖本地版本</strong> :<br>    git fetch –all<br>    git reset –hard origin/master<br>    git pull</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>Ｇit的每次提交都会把他们串成一条时间线，这条时间线就是一个分支，截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。在版本回退中，HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><ul><li><p><strong>创建分支与切换分支</strong><br>首先，我们来创建dev分支，然后切换到dev分支上。<br>我们也可以分开使用<strong><em>git branch dev</em></strong> 创建分支，<strong><em>git checkout dev</em></strong>切换分支。<strong><em>git branch –d name</em></strong>删除分支。</p></li><li><p><strong>合并分支</strong><br>修改dev分支的内容，添加内容“555555555”，提交到仓库中，<br>切换至主分支，可以看到readme.txt文件内容未发生变化.<br>在master分支中执行，<strong><em>git merge 分支名称</em></strong>，合并分支到当前master分支中</p></li><li><p><strong>分支管理策略</strong><br>分支是GIT在团队协作中非常重要的一部分，首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，然后每个人都在dev分支上再新建分支干活，功能完成后合并到dev分支中，如果要发布，或者说dev分支代码稳定后可以合并到主分支master上来。平常修复BUG，可以新建临时分支，修复后视情况合并到其他分支中，再删除掉临时分支。</p></li><li><p><strong>远程分支</strong><br>创建远程分支：先创建本地分支，然后使用<strong><em>git push origin 分支名称</em></strong>，创建远程分支<br>关联远程分支：第一次提交使用 <strong><em>git push -u origin 分支名称</em></strong>，默认会关联远程分支，若想直接关联远程分支使用 <strong><em>git branch –set-upstream-to=origin/分支名称</em></strong>，即可。<br>查看所有分支：<strong><em>git branch -a</em></strong><br>查看所有分支与远程的映射关系：<strong><em>git branch -vv</em></strong><br>团队协作中，首先需要用<strong><em>git pull</em></strong>更新远程分支的内容到本地，再用<strong><em>git push origin branch</em></strong> 分支名称推送自己的修改.</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华山版java编程规范</title>
      <link href="/2020/05/06/%E5%8D%8E%E5%B1%B1%E7%89%88java%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
      <url>/2020/05/06/%E5%8D%8E%E5%B1%B1%E7%89%88java%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
